#!/usr/bin/env bash

# Exit on any error
set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Function to print colored output
print_status() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Check if running as root
if [ "$EUID" -ne 0 ]; then
    print_error "This script must be run as root"
    exit 1
fi

print_status "Starting Laravel application container..."

# Set correct ownership for Laravel directories
print_status "Setting up Laravel directories and permissions..."
chown -R sail:sail /var/www/html/storage
chown -R sail:sail /var/www/html/bootstrap/cache
chmod -R 775 /var/www/html/storage
chmod -R 775 /var/www/html/bootstrap/cache

# Create required directories if they don't exist
mkdir -p /var/www/html/storage/logs
mkdir -p /var/www/html/storage/app
mkdir -p /var/www/html/storage/framework/cache
mkdir -p /var/www/html/storage/framework/sessions
mkdir -p /var/www/html/storage/framework/views
mkdir -p /var/log/supervisor

# Ensure proper ownership for all storage directories
chown -R sail:sail /var/www/html/storage
chown -R sail:sail /var/www/html/bootstrap/cache

# Create opcache preload file if it doesn't exist
if [ ! -f /var/www/html/config/opcache.php ]; then
    print_status "Creating opcache preload file..."
    cat > /var/www/html/config/opcache.php << 'EOF'
<?php
// OPcache preload script for Laravel
if (!function_exists('opcache_compile_file')) {
    return;
}

// Define the application root
$appRoot = dirname(__DIR__);

// Preload Composer autoloader
$autoloader = $appRoot . '/vendor/autoload.php';
if (file_exists($autoloader)) {
    require_once $autoloader;
}

// Preload Laravel framework files
$preloadFiles = [
    '/vendor/laravel/framework/src/Illuminate/Foundation/Application.php',
    '/vendor/laravel/framework/src/Illuminate/Container/Container.php',
    '/vendor/laravel/framework/src/Illuminate/Support/ServiceProvider.php',
    '/vendor/laravel/framework/src/Illuminate/Support/Facades/Facade.php',
    '/vendor/laravel/framework/src/Illuminate/Http/Request.php',
    '/vendor/laravel/framework/src/Illuminate/Http/Response.php',
    '/vendor/laravel/framework/src/Illuminate/Routing/Router.php',
    '/vendor/laravel/framework/src/Illuminate/View/View.php',
    '/vendor/laravel/framework/src/Illuminate/Database/Eloquent/Model.php',
];

foreach ($preloadFiles as $file) {
    $fullPath = $appRoot . $file;
    if (file_exists($fullPath)) {
        opcache_compile_file($fullPath);
    }
}

// Preload application files
$appFiles = [
    '/app/Http/Kernel.php',
    '/app/Providers/AppServiceProvider.php',
    '/app/Providers/RouteServiceProvider.php',
    '/config/app.php',
    '/config/database.php',
];

foreach ($appFiles as $file) {
    $fullPath = $appRoot . $file;
    if (file_exists($fullPath)) {
        opcache_compile_file($fullPath);
    }
}
EOF
    chown sail:sail /var/www/html/config/opcache.php
fi

# Check the database connection
timeout=30
while ! mysqladmin ping -h "$DB_HOST" -P "$DB_PORT" --silent; do
  timeout=$((timeout - 1))
  if [ $timeout -eq 0 ]; then
    echo "Database connection timeout, continuing anyway..."
    break
  fi
  echo "Waiting for database... ($timeout seconds remaining)"
  sleep 1
done

# Create a health check endpoint if it doesn't exist
if [ ! -f /var/www/html/routes/health.php ]; then
    print_status "Creating health check route..."
    cat > /var/www/html/routes/health.php << 'EOF'
<?php
use Illuminate\Support\Facades\Route;

Route::get('/health', function () {
    return response()->json([
        'status' => 'healthy',
        'timestamp' => now()->toISOString(),
        'environment' => app()->environment(),
        'laravel_version' => app()->version(),
        'php_version' => PHP_VERSION,
    ]);
});
EOF
fi

# Ensure log files exist and have proper permissions
touch /var/www/html/storage/logs/laravel.log
chown sail:sail /var/www/html/storage/logs/laravel.log
chmod 664 /var/www/html/storage/logs/laravel.log

# Start supervisor (this will run the Laravel application)
print_status "Starting supervisor daemon..."
print_status "Laravel application is ready!"
print_status "Application will be available on port 80"

# Execute supervisor in foreground
exec /usr/bin/supervisord -c /etc/supervisor/conf.d/supervisord.conf
