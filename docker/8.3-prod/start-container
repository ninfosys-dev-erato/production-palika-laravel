#!/bin/bash

# Hardened Laravel Production Container Startup Script
# This script starts nginx, php-fpm, and other services with security hardening

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

print_status() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Main startup function
main() {
    print_status "Starting hardened Laravel application container..."
    
    # Create essential directories with proper permissions
    print_status "Setting up directories..."
    mkdir -p /run/php /var/run 2>/dev/null || true
    mkdir -p /var/run/php 2>/dev/null || true
    mkdir -p /var/lib/nginx/body /var/lib/nginx/fastcgi /var/lib/nginx/proxy 2>/dev/null || true
    mkdir -p /var/lib/nginx/scgi /var/lib/nginx/uwsgi 2>/dev/null || true
    mkdir -p /etc/nginx/sites-enabled 2>/dev/null || true
    
    # Set proper permissions for nginx directories
    print_status "Setting up permissions..."
    chown -R www-data:www-data /var/lib/nginx /run/php /var/run/php 2>/dev/null || true
    chmod -R 755 /var/lib/nginx /run/php /var/run/php 2>/dev/null || true
    
    # Create nginx sites symlink
    print_status "Setting up nginx configuration..."
    ln -sf /etc/nginx/sites-available/default /etc/nginx/sites-enabled/default 2>/dev/null || true
    
    # Create temporary OPcache blacklist in /tmp (always works)
    print_status "Creating OPcache blacklist in /tmp..."
    cat > /tmp/opcache-blacklist.txt << 'EOF'
# OPcache blacklist for files that should not be cached
/var/www/html/storage/
/var/www/html/bootstrap/cache/
/var/www/html/.env
EOF
    
    # Test configurations
    print_status "Testing configurations..."
    if nginx -t 2>/dev/null; then
        print_status "Nginx configuration OK"
    else
        print_error "Nginx configuration test failed:"
        nginx -t 2>&1 || true
    fi
    
    if php-fpm8.3 -t 2>/dev/null; then
        print_status "PHP-FPM configuration OK"
    else
        print_error "PHP-FPM configuration test failed:"
        php-fpm8.3 -t 2>&1 || true
    fi
    
    # Database connectivity check
    print_status "Checking database connectivity..."
    if [ -n "$DB_HOST" ] && [ -n "$DB_PORT" ]; then
        timeout=10
        while [ $timeout -gt 0 ]; do
            if mysqladmin ping -h "$DB_HOST" -P "$DB_PORT" --silent 2>/dev/null; then
                print_status "Database connection successful"
                break
            fi
            timeout=$((timeout - 1))
            [ $timeout -eq 0 ] && print_warning "Database not reachable, continuing anyway..."
            sleep 1
        done
    else
        print_warning "Database variables not set, skipping connectivity check"
    fi
    
    # Ensure Laravel storage directories exist and have proper permissions
    print_status "Setting up Laravel storage directories..."
    mkdir -p /var/www/html/storage/logs 2>/dev/null || true
    mkdir -p /var/www/html/storage/app/public 2>/dev/null || true
    mkdir -p /var/www/html/storage/app/private 2>/dev/null || true
    mkdir -p /var/www/html/storage/framework/cache 2>/dev/null || true
    mkdir -p /var/www/html/storage/framework/sessions 2>/dev/null || true
    mkdir -p /var/www/html/storage/framework/views 2>/dev/null || true
    mkdir -p /var/www/html/bootstrap/cache 2>/dev/null || true
    
    # Set proper permissions for all storage directories
    print_status "Setting storage permissions..."
    chown -R www-data:www-data /var/www/html/storage /var/www/html/bootstrap/cache 2>/dev/null || true
    chown -R www-data:www-data /var/www/html/public 2>/dev/null || true
    chmod -R 775 /var/www/html/storage 2>/dev/null || true
    chmod -R 775 /var/www/html/bootstrap/cache 2>/dev/null || true
    chmod -R 755 /var/www/html/public 2>/dev/null || true
    
    # Create storage symlink for Laravel
    print_status "Creating storage symlink..."
    rm -f /var/www/html/public/storage 2>/dev/null || true
    
    # Change to www-data user for symlink creation to avoid permission issues
    su -s /bin/bash www-data -c "cd /var/www/html && php artisan storage:link --force" 2>/dev/null || {
        print_warning "Artisan command failed, creating symlink manually as www-data user..."
        su -s /bin/bash www-data -c "ln -sf /var/www/html/storage/app/public /var/www/html/public/storage" 2>/dev/null || {
            print_warning "www-data symlink failed, trying as root..."
            ln -sf /var/www/html/storage/app/public /var/www/html/public/storage
            chown -h www-data:www-data /var/www/html/public/storage 2>/dev/null || true
        }
    }
    
    # Verify storage symlink exists and is correct
    if [ -L "/var/www/html/public/storage" ]; then
        print_status "✓ Storage symlink exists"
        print_status "Symlink points to: $(readlink /var/www/html/public/storage)"
    else
        print_error "✗ Storage symlink failed to create"
    fi
    
    # Clear Laravel caches to avoid service provider issues
    print_status "Clearing Laravel caches..."
    cd /var/www/html
    su -s /bin/bash www-data -c "php artisan config:clear" 2>/dev/null || true
    su -s /bin/bash www-data -c "php artisan route:clear" 2>/dev/null || true
    su -s /bin/bash www-data -c "php artisan view:clear" 2>/dev/null || true
    su -s /bin/bash www-data -c "php artisan cache:clear" 2>/dev/null || true
    
    # Rebuild caches
    print_status "Rebuilding Laravel caches..."
    su -s /bin/bash www-data -c "php artisan config:cache" 2>/dev/null || print_warning "Config cache failed"
    su -s /bin/bash www-data -c "php artisan route:cache" 2>/dev/null || print_warning "Route cache failed"
    su -s /bin/bash www-data -c "php artisan view:cache" 2>/dev/null || print_warning "View cache failed"
    
    # Set up log rotation cron job
    print_status "Setting up log rotation..."
    echo "0 2 * * * /usr/sbin/logrotate -f /etc/logrotate.d/laravel 2>/dev/null || /usr/local/bin/log-cleanup rotate" > /etc/cron.d/logrotate-laravel
    echo "0 */6 * * * /usr/local/bin/log-cleanup clean 3" >> /etc/cron.d/logrotate-laravel
    echo "*/30 * * * /usr/local/bin/log-cleanup status | grep -q 'consider running cleanup' && /usr/local/bin/log-cleanup emergency" >> /etc/cron.d/logrotate-laravel
    chmod 0644 /etc/cron.d/logrotate-laravel
    
    # Create logrotate state directory
    mkdir -p /var/lib/logrotate
    touch /var/lib/logrotate/status
    
    # Ensure vendor assets are available (runtime check)
    if [ ! -f "/var/www/html/public/rappasoft/laravel-livewire-tables/core.min.js" ]; then
        print_status "Vendor assets missing, publishing now..."
        cd /var/www/html && /usr/local/bin/publish-vendor-assets
    fi
    
    # Start services
    print_status "Starting services..."
    print_status "Laravel application container is ready!"
    
    # Start supervisor to manage nginx, php-fpm, cron and log rotation
    exec /usr/bin/supervisord -c /etc/supervisor/conf.d/supervisord.conf
}

# Execute main function
main "$@"
